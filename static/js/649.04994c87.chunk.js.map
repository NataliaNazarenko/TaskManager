{"version":3,"file":"static/js/649.04994c87.chunk.js","mappings":"wOAEaA,EAAUC,EAAAA,EAAAA,IAAH,iKASPC,EAAOD,EAAAA,EAAAA,EAAH,mEAKJE,EAASF,EAAAA,EAAAA,OAAH,4WAkBK,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAAvB,I,UC9BhBC,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACZ,EAAD,YACE,SAACE,EAAD,UAAOQ,KACP,SAACP,EAAD,CAAQU,KAAK,SAASC,QALL,kBAAMH,GAASI,EAAAA,EAAAA,IAAWN,GAA1B,EAKjB,sBAKL,E,UCdYO,EAAW,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,EAEhBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,YAAa,CAA7B,EAEpBC,EAAW,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,KAAhB,ECJhBC,IDMcC,EAAAA,EAAAA,IACzB,CAACT,EAAU,SAACU,EAAGC,GAAJ,OAAeA,CAAf,IACX,SAACT,EAAOS,GACN,OAAOT,EAAMU,MAAK,SAAAC,GAAI,OAAIA,EAAKpB,KAAOkB,CAAhB,KAA2B,IAClD,ICViB1B,EAAAA,EAAAA,GAAH,2JCGJ6B,EAAW,WACtB,IAAMZ,GAAQa,EAAAA,EAAAA,IAAYf,GAE1B,OACE,SAACQ,EAAD,UACGN,EAAMc,KAAI,gBAAGvB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,yBACE,SAACF,EAAD,CAAMC,GAAIA,EAAIC,KAAMA,KADbD,EADA,KAOhB,ECfYwB,EAAOhC,EAAAA,EAAAA,KAAH,uGAQJiC,EAAQjC,EAAAA,EAAAA,MAAH,iOAWLE,EAASF,EAAAA,EAAAA,OAAH,qWCjBNkC,EAAW,WACtB,IAAMxB,GAAWC,EAAAA,EAAAA,MAcjB,OACE,UAACqB,EAAD,CAAMG,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACT9B,EAAO6B,EAAKE,SAAS/B,KAAKgC,MAChC,GAAa,KAAThC,EAGF,OAFAC,GAASgC,EAAAA,EAAAA,IAAQjC,SACjB6B,EAAKK,QAGPC,MAAM,yCACP,EAGC,WACE,SAACX,EAAD,CAAOY,KAAK,UACZ,SAAC,EAAD,CAAQjC,KAAK,SAAb,wBAKL,ECnBc,SAASkC,IACtB,IAAMpC,GAAWC,EAAAA,EAAAA,MACXM,GAAQa,EAAAA,EAAAA,IAAYf,GACpBK,GAAYU,EAAAA,EAAAA,IAAYX,GACxBG,GAAQQ,EAAAA,EAAAA,IAAYT,GAM1B,OAJA0B,EAAAA,EAAAA,YAAU,WACRrC,GAASsC,EAAAA,EAAAA,MACV,GAAE,CAACtC,KAGF,iCACE,SAACuC,EAAA,EAAD,WACE,6CAGF,SAACf,EAAD,KAEA,yBAAMd,IAAcE,IAAS,oDAE5BL,EAAMiC,OAAS,IAAK,SAACrB,EAAD,MAK1B,C","sources":["components/Tasks/Task/Task.styled.jsx","components/Tasks/Task/Task.jsx","redux/tasks/selectors.js","components/Tasks/TaskList/TaskList.styled.jsx","components/Tasks/TaskList/TaskList.jsx","components/Tasks/TaskItem/TaskItem.styled.jsx","components/Tasks/TaskItem/TaskItem.jsx","pages/Tasks/Tasks.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 4px;\n    border: 1px solid #2a2a2a;\n    border-radius: 4px;\n`;\n\nexport const Text = styled.p`\n    margin-top: 0;\n    margin-bottom: 0;\n`;\n\nexport const Button = styled.button`\n    border: none;\n    font: inherit;\n    cursor: pointer;\n    outline: none;\n    margin-left: auto;\n    border-radius: 4px;\n    padding: 8px 12px;\n    background-color: #3f51b5;\n    color: #fff;\n    }\n\n\n    &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    }\n\n    &:hover {\n    background-color: ${props => props.theme.colors.light};\n    }\n`;","import { useDispatch } from 'react-redux';\nimport { deleteTask } from 'redux/tasks/operations';\nimport { Wrapper, Text, Button } from './Task.styled';\n\nexport const Task = ({ id, text }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <Wrapper>\n      <Text>{text}</Text>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </Wrapper>\n  );\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getTasks = state => state.tasks.items;\n\nexport const getIsLoading = state => state.tasks.isLoading || false;\n\nexport const getError = state => state.tasks.error;\n\nexport const getTaskById = createSelector(\n  [getTasks, (_, taskId) => taskId],\n  (tasks, taskId) => {\n    return tasks.find(task => task.id === taskId) || null;\n  }\n);","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-gap: 12px;\n`;\n\n","import { useSelector } from 'react-redux';\nimport { Task } from '../Task';\nimport { getTasks } from 'redux/tasks/selectors';\nimport { List } from './TaskList.styled';\n\nexport const TaskList = () => {\n  const tasks = useSelector(getTasks);\n\n  return (\n    <List>\n      {tasks.map(({ id, text }) => (\n        <li key={id}>\n          <Task id={id} text={text} />\n        </li>\n      ))}\n    </List>\n  );\n};","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n    display: flex;\n    width: 100%;\n    gap: 4px;\n    margin-bottom: 12px;\n`;\n\n\nexport const Input = styled.input`\n    flex-grow: 1;\n    padding: 8px;\n    border: 1px solid rgba(33, 33, 33, 0.2);\n    border-radius: 4px;\n    font: inherit;\n    line-height: 16px;\n    letter-spacing: 0.01em;\n    resize: none;\n`;\n\nexport const Button = styled.button`\n    border: none;\n    font: inherit;\n    cursor: pointer;\n    outline: none;\n    padding: 0 8px;\n    border-radius: 4px;\n    background-color: #3f51b5;\n    color: #fff;\n    }\n\n    &:hover,\n    &:focus {\n    background-color: #303f9f;\n    }\n\n    &:active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    }\n  \n`;","import { useDispatch } from 'react-redux';\nimport { addTask } from 'redux/tasks/operations';\nimport { Form, Input, Button } from './TaskItem.styled';\n\nexport const TaskItem = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"text\" />\n      <Button type=\"submit\">\n        Add task\n      </Button>\n    </Form>\n  );\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { TaskList } from 'components/Tasks/TaskList';\nimport { TaskItem } from 'components/Tasks/TaskItem';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { getIsLoading, getError, getTasks } from 'redux/tasks/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const tasks = useSelector(getTasks);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n\n      <TaskItem />\n\n      <div>{isLoading && !error && <b>Request in progress...</b>}</div>\n\n      {tasks.length > 0 && <TaskList />}\n      \n      \n    </>\n  );\n}"],"names":["Wrapper","styled","Text","Button","props","theme","colors","light","Task","id","text","dispatch","useDispatch","type","onClick","deleteTask","getTasks","state","tasks","items","getIsLoading","isLoading","getError","error","List","createSelector","_","taskId","find","task","TaskList","useSelector","map","Form","Input","TaskItem","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","Tasks","useEffect","fetchTasks","Helmet","length"],"sourceRoot":""}